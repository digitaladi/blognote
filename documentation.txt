

        créer le projet symfony 
symfony new my_project_directory --version="7.1.*" --webapp


en cas de problémes de, de conflits de ports dans le container on relance le moteur docker
        service docker restart
 

pour stopper et supprimer tous les containers :
      docker rm -f $(docker ps -aq)


supprimer tous images en meme temp
        docker rmi $(docker images -q)

Commande pour accéder au shell du container php-fpm
docker compose exec php-fpm  /bin/bash


lien pour la gestion les images et containers: https://www.hostinger.fr/tutoriels/supprimer-toutes-les-images-docker#:~:text=Pour%20supprimer%20plusieurs%20images%20Docker,images%20que%20vous%20souhaitez%20supprimer.&text=La%20commande%20docker%20images%20%2Dq,supprime%20toutes%20vos%20images%20Docker.



un conseil : éxécuter vos commandes dans le container


1 - Pour créer un controller 

symfony console  make:controller

Cette commande  src/Controller/MainController.php et templates/main/index.html.twig



le css se troue dans assets/styles/app.css









pour acceder au settings et faire des configs du coté graphique...
 ctrl + shift + p

....il est possible de faire les configs du coté fichier en cliquant sur l'icone fichier


pour trouver le namespace d'un objet, fuction ou class
ctrl + alt + i 





//EXTENSIONS VISUAL STUDIO A INSTALLER SUR SYMFONY :  

1. PHP Intelephense
2. PHPDoc Comment
3. PHP Namespace Resolver
4. Symfony code snippets
5. Symfony for VSCode
6. Symfony Snippets
7. Twig
8. Twig Language 2
9. HTML CSS Support
10. Twig
11. JavaScript (ES6) code snippets
12. Community Material Theme (Extra)
13. French Language Pack for Visual Studio Code
14. Live Sass Compiler

NB: voir ce lien : https://blog.codewithdary.com/must-have-vscode-extensions-for-symfony




    

_________________ AssetMapper : gestion CSS et JS simple et moderne   _________________
  

  Il est installer par default sur symfony sinon si ce n'est pas le cas voila la commande à taper
Pour installer le composant AssetMapper, exécutez :

        composer require symfony/asset-mapper symfony/asset symfony/twig-pack

        voila le résultat : 
        assets/app.js Votre fichier JavaScript principal ;
        assets/styles/app.css Votre fichier CSS principal ;
        config/packages/asset_mapper.yaml Où vous définissez vos « chemins » d’actifs ;
        importmap.php Votre fichier de configuration importmap.


importmap() permet de linker notre application à nos fichiers de css et js 'app' concerne le app.js.
c'est le point d'entrée de nos fichiers css et js
 {% block importmap %}{{ importmap('app') }}{% endblock %}





_________________ CREATION DE LA BASE DE DONNEES   _________________
  
création de l'entité user pour authentification

         symfony console make:user
resultat : 
 created: src/Entity/User.php
 created: src/Repository/UserRepository.php
 updated: src/Entity/User.php
 updated: config/packages/security.yaml


 on va ajouter des attributs à notre entité user
        symfony console make:entity




on fait la meme chose avec l'entity  :  
        Keyword
        Category
        Trick
        Comment
        rating

les relations :

        - les asctuces (tricks) ne peuvent pas avoir q'un seul user
        - peuvent avoir plusieurs mots-clés (Keyword) et les Keyword peuvent avoir plusierus asctuces
        - un Trick peut avoir plusieurs comments et un comment ne peut aprtenir qu'un seul post et seul user
        - un trick peut avoir plusieurs rating mais un rating ne peu appartenir  qu'un seul trick

une fois les entités finis : 

on crée les requetes : 
        symfony console make:migration

si touche se passe bien un fichier de migration sera crée dans le dossier migrations qui contient toutes les requetes liées aux entités

pour le faire correspondre à notre base de données on fait : 


symfony console doctrine:migrations:migrate


et la tous nos tables et leurs colonnes sont crées

Pour supprimer touta la base de données et refaire la migration
        symfony console d:d:d --force 

pour réecrer la base de données
        symfony console d:d:c 



_________________   AUTHENTIFICATION   _________________
faire L'authentification

        symfony console make:auth  

...suivre les instructions

voila ce qui a été crée : 

        created: src/Security/UserAuthentificatorAuthenticator.php
        updated: config/packages/security.yaml
        created: src/Controller/SecurityController.php
        created: templates/security/login.html.twig

...lire les instructions qui suivent





faire l'inscription : 
        symfony console make:registration

voila le résultat : 

 updated: src/Entity/User.php
 created: src/Form/RegistrationFormType.php
 created: src/Controller/RegistrationController.php
 created: templates/registration/register.html.twig


...lire les instructions qui suivent







_________________   ENVOIE DE MAIL  _________________

on va simuler un envoie de mail avec mailhog avec docker

on éxcécute docker compose pour créer un nouveau container enfin que l'image soit pris en compte

aller dans .env.local decommenter cette ligne et configurer comme ceci : 
        MAILER_DSN=smpt://mailhog:1025


puis aller dans configs/packages/messenger.yaml et decommenter cette ligne : 
        #Symfony\Component\Mailer\Messenger\SendEmailMessage: async

cela permet d'ignorer le systeme par defaults de symfony qui permet d'envoyer des mails


et si vous voulez mettre un systéme fil d'attente il faut décommenter cette ligne


Je vais dans env.local pour créer un clé token qui me permet d'activer mon compte si j'envoie le mail
JWT_SECRET = 'messiTheGreatest'


pour acceder à JWT_SECRET dans notre controller ex il faut aller le déclarer dans config/services.yaml dans les parameters : 
          app.jwtsecret: '%env(JWT_SECRET)'


donc pour envoyer l'email il faut aller dans la fonction register (fonction pour s'enregistrer) dans le controller RegistrationController
        - generer le tocken
        - envoyer le mail 








aller dans src créer un dossier services pour y mettre mes services 
après s'y met s'y crée le service SendEmailService.php

pour le template de l'email d' inscription on crée un dossier emails dans templates et on y crée le fichier register.html.twig



on va créer un service JWTService.php

on va créer 
        - la fonction qui génére le token
        - fonction qui vérifie si le token est valide
        - fonction qui récupére le Payload
        - fonction qui récupére le header
        - fonction qui vérifie si le token a expiré
        - fonction qui vérifie la signature du Token

après inscription :
        - on génére le token
        - et envoie le mail





activer le compte si on on clique sur un lien dans le mail d'inscription







_________________   MOT DE PASSE OUBLIE  _________________

créer une  : 
- fonction forgottenPassword dans le controller SecurityController : permet d'acceder à une page d'envoie de mail à l'utilisateur pour réntialiser le mdp
- le template  reset_password_request.html.twig qui va recevoir l'email de d'envoie de renitialisation de mdp
- une template email password_reset.html.twig : qui va recevoir le lien pour réinitialiser le mdp
- Créer un formulaire avec comme champ l'email : ResetPasswordRequestFormType.php

- Créer la fonction resetPassword dans le controller SecurityController permet de réinitialiser le mdp
- créer un formulaire avec un champ password pour 







_________________   CREATION  CONTROLLER ET FORMULAIRE POUR D AUTRES ENTITES  _________________


pour créer un formulaire
         symfony console make:form 



création controller (dans Admin/..) et formType de : 
        - keywordsController
        - KeywordFormType





        - CategorieController
        - KeywordFormType






NB : une relation dans une meme table ex: categorie
c'est à  dire une catégorie peut avoir une catégorie






creation du controller trick (astuce) (dans Profil/..) 

- TrickController
- AddTrickFormType













______________________________ LES DATAFIXTURES ____________________

on isntall nos fixtures
        composer require --dev orm-fixtures

resultat : 
un dossier Datafixtures est crée dans /src


on supprime les tables de notre base de données après :
on refait 
        - On supprime le fichier migration dans le dossier migration 
on lance : 
        - symfony console make:migration  (pour créer nos requetes à partir des entités et génére un nouveau fchier de migration dans le dossier de migration)

        - symfony console doctrine:migrations:migrate (avec les requetes du fichier de migration on crée nos tables)






avec nos Datafixtures on va créer des enregsitrements à la volée


pour chaque entité on aura un fixture :
on va créer pour Keyword KeywordFixtures

pour lancer les fixtures de keyword
symfony console d:f:l










______________________________ LES CONSTRAINTES ____________________

les constraintes de l'entité 

les données sont vérifiés avant d' etre stockés dans la base alors que les contraintes de formulaire ne s'ocupent que les donées rentrés dans le formulaire

la class qui s'occupe des constraintes : 
use Symfony\Component\Validator\Constraints as Assert;

une contrainte sur un champs email exemple :  
1er param de la fonction Assert\Email : une clé/valeur = messeage:erreur

    #[Assert\Email(
        message: 'The email {{ value }} is not a valid email.',
    )]
    protected string $email;





on peut aussi faire des contraintes de formulaire : ex : 

                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                       // 'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        // max length allowed by Symfony for security reasons
                        'max' => 4096,
                    ]),
                ],









_________________________________  Règles d’entropie des mots de passe  __________________________________

mettre en place dans le fichier assets/js/register.js




_________________________________   Upload d'Images et Redimensionnement  __________________________________
mettre dans 
créer un dossier d'Upload en parameters dans le fichier services.yaml


créer un service pour l'Upload et Redimensionnement
PictureService.php


- Affichage de l'image après ajout en js et ajax





//installer les icones symfony ux
composer require symfony/ux-icons

//pour voir  les informations sur les icones existants : symfony console ux:icons:search

on préfixe par  ex  "fa"
il t'affiche tous les set icon: 

//on préfixe par  ex  "tabler"
il affiche le nombre de icons




//si on veut trouver des icones sur un theme user exemple : 
symfony console ux:icons:search tabler user : 


 tabler:user                                tabler:user-bitcoin                       
  tabler:user-bolt                           tabler:user-cancel                        
  tabler:user-check                          tabler:user-circle                        
  tabler:user-code                           tabler:user-cog                           
  tabler:user-dollar                         tabler:user-down                          
  tabler:user-edit                           tabler:user-exclamation                   
  tabler:user-filled                         tabler:user-heart                         
  tabler:user-hexagon                        tabler:user-minus                         
  tabler:user-off                            tabler:user-pause                         
  tabler:user-pentagon                       tabler:user-pin  






et vous ajouter comme par magie ce code dans votre twig et ça marche: 
	{{ ux_icon('tabler:user-circle') }}


aller sur le site :  https://ux.symfony.com/icons


lien pour tuto : https://www.youtube.com/watch?v=VkNNhap-CBc






                                                


<!-- <div class="checkbox mb-3"><label><input type="checkbox" name="_remember_me">Se souvenir de moi</label></div>-- >




Créer une function twig 




____________________________________

installation de composer require vich/uploader-bundle





serialiser les colonnes id, username et password




pour le recaptcha
le lien pour des recaptcha : https://www.youtube.com/watch?v=Y_X1_hXZGEs&list=PLUiuGjup8Vg5t20nu7aaJDnbHlhzXbbuN&index=23
composer require karser/karser-recaptcha3-bundle

un fichier  karser_recaptcha3 qui contient le config



_______________________________________________________

Une commande pour créer un administrateur
Le but de cette fonctionnalité est de pouvoir créer en ligen de commande.
Cela permettra d'ajouter des administrateurs

Une commande permet d'exécuter un code en ligne de commande avec une instruction


pour créer la commdande : symfony console make:command

puis vous mettez : app:nom_de_commande

Une fois fais il crée un dossier Command dans lequel se trouve un fichier CreateAdministratorCommand.php

CreateAdministratorCommand.php qui sera éxécuté une fois la commande app:nom_de_commande excuté


si vous taper la commande symfony console vous allez le voir dans la liste des commandes , ce qui prouve votre commande a été enregistré

et pour taper la commande on fait : symfony console app:create-administrator

lien pour créer une commande symfony :  https://www.youtube.com/watch?v=IjJoA9IRzCE&list=PLUiuGjup8Vg5t20nu7aaJDnbHlhzXbbuN&index=39


_______________________________________________________
The cache component permet de faire une cache des ressources
pour l'installer : composer require symfony/cache



use Symfony\Component\Cache\Adapter\FilesystemAdapter;


        //on récupère le cache
        //$cache = new FilesystemAdapter();

               //trick_key est la clé avec le quel le cache est identifié
       //la fonction callback va retourner l'item dans lequel se trouve le data et la durée de la disponibilité du cache

       $data =  $cache->get('trick_key', function(ItemInterface $item) use ($trickRepository){
       $item->expiresAfter(35);
       return $trickRepository->trickByCategory();

       });


_______________________________________________________________

Event Listeners :
Event Listeners sont des evenements qu'on écoute lors de différentes phase de l'exécution de d'une application symfony
exemple : des evenements sont déclanchés lors d'une requette http


Subscribers : 
la principale différence entre Event Subscribers et les  Event Listeners est que les Event Subscribers connaissent déja en avance les evenements qu'ils écoutent



Event Listeners :
les events listeners par default de symfony sont beaucoups dont certains : 
kernel.request, kernel.controller, kernel.controller_arguments ect...





   créer notre propre listeneur : 
   - symfony console make:listener  





  créer notre propre listeneur Subscriber
   symfony console make:subscriber


        1- donner le nom de class de notre event listener ex: MaClassEcouterEvenement
        2- donner le event à écouter  ex : kernel.request (qui s'éxécute après chaque requete)


resultat il va creer une class MaClassEcouterEvenement dans le quel il implemente : 
- la fonction onKernelRequest qui contient l'action après l'evenements
- la fonction getSubscribedEvents dans lequel il y'a le liste des evenements qu'on écoute




_______________________________________________________Personnalisé les pages d'erreurs________________________________________

1 - Installer composer require symfony/twig-pack si vous n'avez installer version webapp se symfony

2 - créer ces fichiers dans l'arboresence comme ceci : 
templates/
└─ bundles/
   └─ TwigBundle/
      └─ Exception/
         ├─ error404.html.twig
         ├─ error403.html.twig
         └─ error.html.twig      # All other HTML errors (including 500)


3 - fichier de config par default : 

# config/routes/framework.yaml
when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix:   /_error

4 - aller dans le fichier env. et mettre prod à la place de dev (en.local si on veut tester en locale le comportement en production)

NB: pour tester la page on peut vérifié sur  : http://localhost/_error/{statusCode}

N'oublier pas à chaque fois de vider le cache pour qu'il marche en mode prod




__________________________________________________________________________________________________________________________________




















SUPPRIMER UN PACKAGE SYMFONY AVEC COMPOSER



 composer remove TonPackage --update-with-dependencies --dev

 puis supprimer le TonPackage dans composer.json
 puis faire un composer update











____________________




<?php

/**
 * Returns the importmap for this application.
 *
 * - "path" is a path inside the asset mapper system. Use the
 *     "debug:asset-map" command to see the full list of paths.
 *
 * - "entrypoint" (JavaScript only) set to true for any module that will
 *     be used as an "entrypoint" (and passed to the importmap() Twig function).
 *
 * The "importmap:require" command can be used to add new entries to this file.
 */
return [
    'app' => [
        'path' => './assets/app.js',
        'entrypoint' => true,
    ],
    'register' => [
        'path' => './assets/js/register.js',
        'entrypoint' => true,
    ],
    'add-response-comment' => [
        'path' => './assets/js/addResponseComment.js',
        'entrypoint' => true,
    ],
    '@hotwired/stimulus' => [
        'version' => '3.2.2',
    ],
    '@symfony/stimulus-bundle' => [
        'path' => './vendor/symfony/stimulus-bundle/assets/dist/loader.js',
    ],
    '@hotwired/turbo' => [
        'version' => '8.0.12',
    ],
];




























document.addEventListener("turbo:load", function() {
    // Your JS code that should run after a full page load


//console.log("je suis dans le fichier js addResponseComment.js")

//selectionner tous les élements qui ont l'attribut data-reply
document.querySelectorAll("[data-reply]").forEach(element => {
    element.addEventListener("click", function(){
        console.log(this)
    })
})


});


































<?php

/**
 * Returns the importmap for this application.
 *
 * - "path" is a path inside the asset mapper system. Use the
 *     "debug:asset-map" command to see the full list of paths.
 *
 * - "entrypoint" (JavaScript only) set to true for any module that will
 *     be used as an "entrypoint" (and passed to the importmap() Twig function).
 *
 * The "importmap:require" command can be used to add new entries to this file.
 */
return [
    'app' => [
        'path' => './assets/app.js',
        'entrypoint' => true,
    ],
    'register' => [
        'path' => './assets/js/register.js',
        'entrypoint' => true,
    ],
    'add-response-comment' => [
        'path' => './assets/js/addResponseComment.js',
        'entrypoint' => true,
    ],
    '@hotwired/stimulus' => [
        'version' => '3.2.2',
    ],
    '@symfony/stimulus-bundle' => [
        'path' => './vendor/symfony/stimulus-bundle/assets/dist/loader.js',
    ],
    '@hotwired/turbo' => [
        'version' => '8.0.12',
    ],
];











import './bootstrap.js';
/*
 * Welcome to your app's main JavaScript file!
 *
 * This file will be included onto the page via the importmap() Twig function,
 * which should already be in your base.html.twig.
 */

//on importe le css app.css
import './styles/app.css';

//on importe le css bootstrap.min.css
import './styles/bootstrap.min.css';

//on importe le js scripts.js
import './js/scripts.js';


//importe le fichier js addResponseComment.js
import './js/addResponseComment.js';


//récuperer le module
import { maj } from './js/my_module.js';

//console.log(maj("aladi"))

//console.log('This log comes from assets/app.js - welcome to AssetMapper! 🎉');